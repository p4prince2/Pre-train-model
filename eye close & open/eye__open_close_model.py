# -*- coding: utf-8 -*-
"""eye _open_close_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NyY1KqNldeUvcG8H32yrmARMZYwS6OI4
"""

!pip uninstall -y numpy tensorflow keras protobuf

## imp
!pip install tensorflow==2.12.0 numpy==1.23.5

import tensorflow as tf
print("TF version:", tf.__version__)

model = tf.keras.models.load_model('keras_model.h5')

from PIL import Image
import numpy as np

# Load and preprocess image
image = Image.open('655.jpg').resize((224, 224))  # Resize as per model input
input_data = np.expand_dims(np.array(image) / 255.0, axis=0)

# Predict
predictions = model.predict(input_data)
#print("Predictions:", predictions)
labels = ["closed", "open"]

# Get predicted index
predicted_index = np.argmax(predictions)

# Get confidence
confidence = predictions[0][predicted_index]

# Output result
print(f"Predicted class: {labels[predicted_index]}")
print(f"Confidence: {confidence * 100:.2f}%")

from tensorflow.keras.preprocessing.image import load_img, img_to_array

image_paths = ['635.jpg', '655.jpg', '8.jpg', '9.jpg']
input_data = []
labels = ["closed", "open"]

# Preprocessing
for path in image_paths:
    img = load_img(path, target_size=(224, 224))
    img_array = img_to_array(img)
    input_data.append(img_array)

# Normalize and convert to numpy
import numpy as np
input_data = np.array(input_data) / 255.0

# Predict
predictions = model.predict(input_data)
print(predictions)

# Output predictions
for i in range(len(predictions)):
    predicted_index = np.argmax(predictions[i])
    confidence = predictions[i][predicted_index]

    print(f"Image: {image_paths[i]}")
    print(f"Predicted class: {labels[predicted_index]}")
    print(f"Confidence: {confidence * 100:.2f}%\n")

